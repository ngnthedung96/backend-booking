/* eslint-disable consistent-return */
/* eslint-disable no-unused-vars */
/* eslint-disable no-console */

/**
 * Do not edit this file
 * Created by khiemtv
 */

/**
 * Filename: server.mjs
 * Author: khiemtv
 * Created Date: 2023-08-05
 * Description: This file contains an init for app server.
 */

import { createServer } from "http";
import express from "express";
import middleware from "./middleware";
import loadRoutes from "./router";
import logger from "./libs/logger";
import initializeServices from "./boot";

// set global variabes
global.gLogger = logger;

const app = express();
const httpServer = createServer(app);

// init all services
initializeServices(httpServer);

// add multi middeware
Object.keys(middleware).forEach((key) => {
  app.use(middleware[key]);
});

loadRoutes().then((router) => {
  app.use(express.json()); // for parsing application/json
  app.use(express.urlencoded({ extended: true })); // for parsing application/x-www-form-urlencoded
  app.use("/api", router);
  // process response success with status code 20x
  app.use((req, res, next) => {
    const regex = /^\/api/;
    const { resData = {} } = res.locals;
    const {
      statusCode = 200,
      message = "This is default api response!",
      data = {},
    } = resData;

    // check if statusCode not 20x, response err
    if (statusCode >= 300 || statusCode < 200) {
      return next({
        statusCode,
        message,
      });
    }

    // check if path not begin with /api, next err
    if (!regex.test(req.originalUrl)) {
      return next({
        statusCode: 404,
        message: "Api URL not found or invalid!",
      });
    }

    logger.info(`Success reponse api: ${statusCode} ${message}`);
    if (process.env.NODE_ENV !== "production") {
      logger.info(JSON.stringify(data));
    }
    res.status(statusCode).json({ message, error: false, data });
  });

  // process for next(err) in controllers with status code 40x
  app.use((err, req, res, next) => {
    logger.error(`Response api error: ${JSON.stringify(err)}`);
    // eslint-disable-next-line prefer-const
    let {
      message = "Internal server error!",
      msg = "Internal server error!",
      statusCode = 500,
    } = err;
    // check error with bad request
    // eslint-disable-next-line no-restricted-syntax
    if (err instanceof SyntaxError && err.status === 400 && "body" in err) {
      // Respond with Bad Request
      message = "Malformed JSON in request body";
      statusCode = 400;
    }

    res.status(statusCode).json({ message: message || msg, error: true });
  });
});

// start server expressjs
const port = `${process.env.PORT}`;
httpServer.listen(port, () => {
  console.log("Server listening on port: ", port);
});

export default httpServer;
